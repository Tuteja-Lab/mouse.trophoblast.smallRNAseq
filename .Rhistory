"nTE day 5"
),
values = c(
"20pcO2_r1" = "#DA3C96",
"20pcO2_r2" = "#DA3C96",
"5pcO2_r1" = "#A90065",
"5pcO2_r2" = "#A90065",
"nCT_D5" = "#FFD74D",
"nCT_D10" = "#FFD74D",
"nTE_D2" = "#9BC13C",
"nTE_D3" = "#9BC13C"
)
) +
scale_linetype_manual(values = "blank")
}
ggplotColours <- function(n = 6, h = c(0, 360) + 15) {
if ((diff(h) %% 360) < 1)
h[2] <- h[2] - 360 / n
hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)
}
color_list <- ggplotColours(n = 13)
grouped_violinPlots <-
function(markersfile,
clusternumber,
seuratobject = bapd8.integrated) {
dittoPlotVarsAcrossGroups(
seuratobject,
markersfile,
group.by = "new_clusters",
main = paste("Cluster ", clusternumber, " markers expression"),
xlab = "",
ylab = "Mean z-score expression",
x.labels = c(
"Cluster 1",
"Cluster 2",
"Cluster 3",
"Cluster 4",
"Cluster 5",
"Cluster 6",
"Cluster 7",
"Cluster 8",
"Cluster 9",
"Cluster 10",
"Cluster 11",
"Cluster 12",
"Cluster 13"
),
vlnplot.lineweight = 0.5,
legend.show = FALSE,
jitter.size = 0.5,
color.panel = color_list
)
}
save.image("snRNAseq.Rdata")
ensembl = useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(ensembl) %>%
filter(str_detect(description, "Human"))
ensembl = useDataset("hsapiens_gene_ensembl", mart = ensembl)
listFilters(ensembl) %>%
filter(str_detect(name, "ensembl"))
filterType <- "ensembl_gene_id_version"
cts <- as.matrix(read.csv('assets/counts-subset-v5.txt', sep = "\t", row.names = "gene.ids"))
filterValues <- rownames(cts)
listAttributes(ensembl) %>%
head(20)
attributeNames <- c('ensembl_gene_id_version',
'ensembl_gene_id',
'external_gene_name')
annot <- getBM(
attributes = attributeNames,
filters = filterType,
values = filterValues,
mart = ensembl
)
isDup <- duplicated(annot$ensembl_gene_id)
dup <- annot$ensembl_gene_id[isDup]
annot <- annot[!annot$ensembl_gene_id %in% dup, ] #this object will be saved and used later
symbols.to.ensembl <- function(genesymbols) {
newlist <- paste0(deparse(substitute(genesymbols)), ".ensids")
temp <- annot[annot$external_gene_name %in% genesymbols,]
temp <- temp[c(2,3)]
assign(newlist, temp, envir = .GlobalEnv)
}
symbols.to.ensembl(cluster.marker.names.1)
symbols.to.ensembl(cluster.marker.names.2)
symbols.to.ensembl(cluster.marker.names.3)
symbols.to.ensembl(cluster.marker.names.4)
symbols.to.ensembl(cluster.marker.names.5)
symbols.to.ensembl(cluster.marker.names.6)
symbols.to.ensembl(cluster.marker.names.7)
symbols.to.ensembl(cluster.marker.names.8)
symbols.to.ensembl(cluster.marker.names.9)
symbols.to.ensembl(cluster.marker.names.10)
symbols.to.ensembl(cluster.marker.names.11)
symbols.to.ensembl(cluster.marker.names.12)
symbols.to.ensembl(cluster.marker.names.13)
cluster.marker.names.1
library(ggtree)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install("Biostrings")
library(cli)
install.packages("cli")
install.packages("yaml")
devtools::install_github("dynverse/dyno")
dynwrap::test_singularity_installation(detailed = TRUE)
dynwrap::test_docker_installation(detailed = TRUE)
install.packages("airqualityES")
library(airqualityES)
df <- airquality[complete.cases(airquality),]
filter_at(df, vars(Ozone, Solar.R, Wind, Temp), ~. > quantile(., probs = 0.75))
library(tidyverse)
df <- airquality[complete.cases(airquality),]
df
filter_at(df, vars(Ozone, Solar.R, Wind, Temp), ~. > quantile(., probs = 0.75))
??remotes::install_github
install.packages("pacman")
library(pacman)
pacman::p_load(c("impute", "pcaMethods", "globaltest", "GlobalAncova", "Rgraphviz", "preprocessCore", "genefilter", "SSPA", "sva", "limma", "KEGGgraph", "siggenes","BiocParallel", "MSnbase", "multtest", "RBGL", "edgeR", "fgsea"))
metanr_packages <- function(){
metr_pkgs <- c("impute", "pcaMethods", "globaltest", "GlobalAncova", "Rgraphviz", "preprocessCore", "genefilter", "SSPA", "sva", "limma", "KEGGgraph", "siggenes","BiocParallel", "MSnbase", "multtest", "RBGL", "edgeR", "fgsea", "devtools", "crmn")
list_installed <- installed.packages()
new_pkgs <- subset(metr_pkgs, !(metr_pkgs %in% list_installed[, "Package"]))
if(length(new_pkgs)!=0){if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(new_pkgs)
print(c(new_pkgs, " packages added..."))
}
if((length(new_pkgs)<1)){
print("No new packages added...")
}
metanr_packages()
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("vctrs")
library(vctrs)
library(tidyverse)
options(max.print = "125")
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#>",
fig.path = "assets/",
fig.width = 8,
prompt = FALSE,
tidy = FALSE,
message = FALSE,
warning = TRUE
)
knitr::opts_knit$set(width = 75)
library(scales)
library(data.table)
library(tidyverse)
library(plotly)
library(TissueEnrich)
setwd(
"C:/Users/arun/OneDrive - Iowa State University/OrganizedDocuments/github/mouse.trophoblast.smallRNAseq"
)
dat <-
read.csv(
"assets/data_processed.csv",
row.names = NULL,
stringsAsFactors = TRUE
)
orig_data <-
read.csv("assets/orig_data.csv",
row.names = NULL,
stringsAsFactors = TRUE)
source("assets/theme_clean.R")
dat_tidy <- dat %>% drop_na()
dat %>% summarise(Number_of_proteins = n())
plotTE <- function(inputGenes = gene.list,
myColor = "color") {
gs <-
GeneSet(geneIds = inputGenes,
organism = "Mus Musculus",
geneIdType = SymbolIdentifier())
output <- teEnrichment(inputGenes = gs, rnaSeqDataset = 3)
en.output <-
setNames(data.frame(assay(output[[1]]),
row.names = rowData(output[[1]])[, 1]),
colData(output[[1]])[, 1])
en.output$Tissue <- rownames(en.output)
logp <- -log10(0.05)
en.output <-
mutate(en.output,
significance = ifelse(Log10PValue > logp,
"colored", "nocolor"))
en.output$Sig <- "NA"
ggplot(en.output, aes(reorder(Tissue, Log10PValue),
Log10PValue,
fill = significance)) +
geom_bar(stat = 'identity') +
theme_clean() + ylab("- log10 adj. p-value") + xlab("") +
scale_fill_manual(values = c("colored" = myColor, "nocolor" = "gray")) +
scale_y_continuous(expand = expansion(mult = c(0, .1)),
breaks = scales::pretty_breaks()) +
coord_flip()
}
diff <- df$newGenes[df$log2fc <= -0.584962501 & df$Qvalue <= 0.05]
df <- orig_data
df$log2fc <- log(df$Ratio, base = 2)
df$negLog10p = -log10(df$Qvalue)
df$diffexpressed[df$log2fc <= -0.584962501 & df$Qvalue <= 0.05] <- "up in Diff"
df$diffexpressed[df$log2fc >= 0.584962501 & df$Qvalue <= 0.05] <- "up in Undiff"
df$diffexpressed[df$log2fc >= -0.584962501 & df$log2fc <= 0.584962501 ] <- "other genes"
df$diffexpressed[df$Qvalue > 0.05] <- "other genes"
df$newGenes <- str_replace_all(string=df$Genes,pattern="\\;.*$",replacement="")
data.table::setDT(df)[diffexpressed == "other genes", newGenes := NA]
g <- ggplot(data=df, aes(x=log2fc, y=negLog10p, col=diffexpressed, label=newGenes)) +
geom_point(alpha = 0.5) +
theme_classic() +
scale_color_manual(name = "Expression", values=c("grey", "#c6007b", "#a0b600")) +
ggtitle(paste("Diff vs. Undiff (proteomics)")) +
#  geom_text_repel(show.legend = F) +
xlab("Log2 fold change") +
ylab("-log10 pvalue") +
theme(legend.text.align = 0)
ggplotly(g)
#ggsave("prot_volc.png", dpi=900, width = 8, height = 6)
plotTE <- function(inputGenes = gene.list,
myColor = "color") {
gs <-
GeneSet(geneIds = inputGenes,
organism = "Mus Musculus",
geneIdType = SymbolIdentifier())
output <- teEnrichment(inputGenes = gs, rnaSeqDataset = 3)
en.output <-
setNames(data.frame(assay(output[[1]]),
row.names = rowData(output[[1]])[, 1]),
colData(output[[1]])[, 1])
en.output$Tissue <- rownames(en.output)
logp <- -log10(0.05)
en.output <-
mutate(en.output,
significance = ifelse(Log10PValue > logp,
"colored", "nocolor"))
en.output$Sig <- "NA"
ggplot(en.output, aes(reorder(Tissue, Log10PValue),
Log10PValue,
fill = significance)) +
geom_bar(stat = 'identity') +
theme_clean() + ylab("- log10 adj. p-value") + xlab("") +
scale_fill_manual(values = c("colored" = myColor, "nocolor" = "gray")) +
scale_y_continuous(expand = expansion(mult = c(0, .1)),
breaks = scales::pretty_breaks()) +
coord_flip()
}
diff <- df$newGenes[df$log2fc <= -0.584962501 & df$Qvalue <= 0.05]
undiff <- df$newGenes[df$log2fc >= 0.584962501 & df$Qvalue <= 0.05]
df.diff <- dat_tidy %>%
rowwise() %>%
mutate(Diff = mean(c(
Diff_rep1,   Diff_rep2,  Diff_rep3,  Diff_rep4,  Diff_rep5
))) %>%
dplyr::select(proteinID, Diff) %>%
dplyr::filter(Diff > 0)  %>%
ungroup() %>%
mutate(quart = ntile(Diff, 4)) %>%
mutate(decile = ntile(Diff, 10))
df.undiff <- dat_tidy %>%
rowwise() %>%
mutate(Undiff = mean(c(
Undiff_rep1, Undiff_rep2, Undiff_rep3, Undiff_rep4, Undiff_rep5
))) %>%
dplyr::select(proteinID, Undiff) %>%
dplyr::filter(Undiff > 0)  %>%
ungroup() %>%
mutate(quart = ntile(Undiff, 4)) %>%
mutate(decile = ntile(Undiff, 10))
filterCuts <- function(dataIn = df.undiff,
cutOff = 4,
type = decile) {
type <- enquo(type)
dataIn %>%
dplyr::filter(!!type == cutOff) %>%
dplyr::select(proteinID)
}
undiff.75pc <- filterCuts(df.undiff, 4, type = quart)
diff.75pc <- filterCuts(df.diff, 4, type = quart)
undiff.90pc <- filterCuts(df.undiff, 10, type = decile)
diff.90pc <- filterCuts(df.diff, 10, type = decile)
plotTE(unique(diff), myColor = "#c6007b")
options(max.print = "125")
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#>",
fig.path = "assets/",
fig.width = 8,
prompt = FALSE,
tidy = FALSE,
message = FALSE,
warning = TRUE
)
knitr::opts_knit$set(width = 75)
readRDS("assets/mset.rds")
group <- sapply(strsplit(rownames(mSet$analSet$pca$x), "_"), "[", 1)
mSet <- readRDS("assets/mset.rds")
group <- sapply(strsplit(rownames(mSet$analSet$pca$x), "_"), "[", 1)
intgroup.df <- as.data.frame(group)
d <- data.frame(
PC1 = mSet$analSet$pca$x[, 1],
PC2 = mSet$analSet$pca$x[, 2],
intgroup.df,
name = rownames(mSet$analSet$pca$x)
)
g <- ggplot(d, aes(PC1, PC2, color = group)) +
scale_shape_manual(values = 1:10) +
scale_color_manual(values = c('Diff'      = '#c6007b',
'Undiff'  = '#a0b600')) +
theme_classic() +
theme(legend.title = element_blank()) +
geom_point(size = 2, stroke = 2) +
geom_text_repel(aes(label = name)) +
xlab(paste("PC1", round(mSet$analSet$pca$variance[1] * 100, 2), "% variance")) +
ylab(paste("PC2", round(mSet$analSet$pca$variance[2] * 100, 2), "% variance"))
log(1.5, 2)
log(1.2, 2)
exp <- log(1.2, 2)
library(scales)
library(data.table)
library(vctrs)
library(tidyverse)
library(plotly)
library(TissueEnrich)
library(ggrepel)
library(RColorBrewer)
library(pheatmap)
setwd("C:/Users/arun/OneDrive - Iowa State University/OrganizedDocuments/github/mouse.trophoblast.smallRNAseq")
dat <-
read.csv("assets/data_processed.csv",
row.names = NULL,
stringsAsFactors = TRUE)
orig_data <-
read.csv("assets/orig_data.csv",
row.names = NULL,
stringsAsFactors = TRUE)
source("assets/theme_clean.R")
dat_tidy <- dat %>% drop_na()
dat %>% summarise(Number_of_proteins = n())
df <- orig_data
exp <- log(1.5, 2)
df$log2fc <- log(df$Ratio, base = 2)
df$negLog10p = -log10(df$Qvalue)
df$diffexpressed[df$log2fc <= -exp &
df$Qvalue <= 0.05] <- "up in Diff"
df$diffexpressed[df$log2fc >= exp &
df$Qvalue <= 0.05] <- "up in Undiff"
df$diffexpressed[df$log2fc >= -exp &
df$log2fc <= exp] <- "other genes"
df$diffexpressed[df$Qvalue > 0.05] <- "other genes"
df$newGenes <-
str_replace_all(string = df$Genes,
pattern = "\\;.*$",
replacement = "")
data.table::setDT(df)[diffexpressed == "other genes", newGenes := NA]
g <-
ggplot(data = df,
aes(
x = log2fc,
y = negLog10p,
col = diffexpressed,
label = newGenes
)) +
geom_point(alpha = 0.5) +
theme_classic() +
scale_color_manual(name = "Expression",
values = c("grey", "#c6007b", "#a0b600")) +
ggtitle(paste("Diff vs. Undiff (proteomics)")) +
#  geom_text_repel(show.legend = F) +
xlab("Log2 fold change") +
ylab("-log10 pvalue") +
theme(legend.text.align = 0)
ggplotly(g)
library("MetaboAnalystR")
library(ggplot2)
library(ggrepel)
mSet <- readRDS("assets/mset.rds")
group <- sapply(strsplit(rownames(mSet$analSet$pca$x), "_"), "[", 1)
intgroup.df <- as.data.frame(group)
d <- data.frame(
PC1 = mSet$analSet$pca$x[, 1],
PC2 = mSet$analSet$pca$x[, 2],
intgroup.df,
name = rownames(mSet$analSet$pca$x)
)
g <- ggplot(d, aes(PC1, PC2, color = group)) +
scale_shape_manual(values = 1:10) +
scale_color_manual(values = c('Diff'      = '#c6007b',
'Undiff'  = '#a0b600')) +
theme_classic() +
theme(legend.title = element_blank()) +
geom_point(size = 2, stroke = 2) +
geom_text_repel(aes(label = name)) +
xlab(paste("PC1", round(mSet$analSet$pca$variance[1] * 100, 2), "% variance")) +
ylab(paste("PC2", round(mSet$analSet$pca$variance[2] * 100, 2), "% variance"))
g
plotTE <- function(inputGenes = gene.list,
myColor = "color") {
gs <-
GeneSet(geneIds = inputGenes,
organism = "Mus Musculus",
geneIdType = SymbolIdentifier())
output <- teEnrichment(inputGenes = gs, rnaSeqDataset = 3)
en.output <-
setNames(data.frame(assay(output[[1]]),
row.names = rowData(output[[1]])[, 1]),
colData(output[[1]])[, 1])
en.output$Tissue <- rownames(en.output)
logp <- -log10(0.05)
en.output <-
mutate(en.output,
significance = ifelse(Log10PValue > logp,
"colored", "nocolor"))
en.output$Sig <- "NA"
ggplot(en.output, aes(reorder(Tissue, Log10PValue),
Log10PValue,
fill = significance)) +
geom_bar(stat = 'identity') +
theme_clean() + ylab("- log10 adj. p-value") + xlab("") +
scale_fill_manual(values = c("colored" = myColor, "nocolor" = "gray")) +
scale_y_continuous(expand = expansion(mult = c(0, .1)),
breaks = scales::pretty_breaks()) +
coord_flip()
}
exp <- log(1.2, 2)
diff <- df$newGenes[df$log2fc <= -exp & df$Qvalue <= 0.05]
undiff <- df$newGenes[df$log2fc >= exp & df$Qvalue <= 0.05]
df.diff <- dat_tidy %>%
rowwise() %>%
mutate(Diff = mean(c(
Diff_rep1,   Diff_rep2,  Diff_rep3,  Diff_rep4,  Diff_rep5
))) %>%
dplyr::select(proteinID, Diff) %>%
dplyr::filter(Diff > 0)  %>%
ungroup() %>%
mutate(quart = ntile(Diff, 4)) %>%
mutate(decile = ntile(Diff, 10))
df.undiff <- dat_tidy %>%
rowwise() %>%
mutate(Undiff = mean(
c(
Undiff_rep1,
Undiff_rep2,
Undiff_rep3,
Undiff_rep4,
Undiff_rep5
)
)) %>%
dplyr::select(proteinID, Undiff) %>%
dplyr::filter(Undiff > 0)  %>%
ungroup() %>%
mutate(quart = ntile(Undiff, 4)) %>%
mutate(decile = ntile(Undiff, 10))
filterCuts <- function(dataIn = df.undiff,
cutOff = 4,
type = decile) {
type <- enquo(type)
dataIn %>%
dplyr::filter(!!type == cutOff) %>%
dplyr::select(proteinID)
}
undiff.75pc <- filterCuts(df.undiff, 4, type = quart)
diff.75pc <- filterCuts(df.diff, 4, type = quart)
undiff.90pc <- filterCuts(df.undiff, 10, type = decile)
diff.90pc <- filterCuts(df.diff, 10, type = decile)
heat_colors <- brewer.pal(9, "YlOrRd")
plotTE.heatmap.full <-
function(inputGenes = gene.list,
inputTissue = "E14.5-Brain",
GeneNames = FALSE) {
gs <-
GeneSet(geneIds = inputGenes,
organism = "Mus Musculus",
geneIdType = SymbolIdentifier())
output <- teEnrichment(inputGenes = gs, rnaSeqDataset = 3)
en.output <-
setNames(data.frame(assay(output[[1]]),
row.names = rowData(output[[1]])[, 1]),
colData(output[[1]])[, 1])
en.output$Tissue <- rownames(en.output)
seExp <- output[[2]][[inputTissue]]
exp <-
setNames(data.frame(assay(seExp), row.names = rowData(seExp)[, 1]),
colData(seExp)[, 1])
g <- pheatmap(
exp,
color = heat_colors,
cluster_rows = F,
cluster_cols  = T,
show_rownames = GeneNames,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 8
)
g
}
plotTE(unique(diff), myColor = "#c6007b")
undiff.75pc
diff.75pc
intersect(undiff.75pc, diff.75pc)
length(intersect(undiff.75pc, diff.75pc))
length(intersect(undiff.90pc, diff.90pc))
lengths(intersect(undiff.90pc, diff.90pc))
