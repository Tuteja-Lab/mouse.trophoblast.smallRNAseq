df$new_clusters <- as.factor(as.numeric(df$seurat_clusters))
bapd8.integrated@meta.data <- df
Idents(bapd8.integrated) <- "new_clusters"
A = enhancedDimPlot(
object = bapd8.integrated,
grouping_var = 'ident',
reduction = "umap",
label = TRUE,
pt.size = 1,
alpha = 0.5
) +
ggtitle("A") +
xlab("UMAP_1") +
ylab("UMAP_2") +
theme_classic() +
theme(legend.position = "none",
plot.title = element_text(face = "bold"))
B <- enhancedDimPlot(
object = bapd8.integrated,
grouping_var = 'replicate',
reduction = "umap",
label = FALSE,
pt.size = 1,
alpha = 0.4
) +
ggtitle("B") +
xlab("UMAP_1") +
ylab("UMAP_2") +
theme_classic() +
theme(
legend.justification = c(1, 1),
legend.position = c(1, 1),
plot.title = element_text(face = "bold")
) +
scale_colour_manual(
name = "Conditions",
labels = c(expression(paste('20% ', 'O'[2])),
expression(paste('5% ', 'O'[2])),
'nCT',
'nTE'),
values = c(
"20pcO2" = "#DA3C96",
"5pcO2" = "#A90065",
"nCT" = "#FFD74D",
"nTE" = "#9BC13C"
)
) +
scale_fill_manual(
name = "Conditions",
labels = c(expression(paste('20% ', 'O'[2])),
expression(paste('5% ', 'O'[2])),
'nCT',
'nTE'),
values = c(
"20pcO2" = "#DA3C96",
"5pcO2" = "#A90065",
"nCT" = "#FFD74D",
"nTE" = "#9BC13C"
)
) +
scale_linetype_manual(values = "blank")
C <- enhancedDimPlot(
object = bapd8.integrated,
grouping_var = 'orig.ident',
reduction = "umap",
label = FALSE,
pt.size = 1,
alpha = 0.4
) +
ggtitle("C") +
xlab("UMAP_1") +
ylab("UMAP_2") +
theme_classic() +
theme(
legend.justification = c(1, 1),
legend.position = c(1, 1),
plot.title = element_text(face = "bold")
) +
scale_colour_manual(
name = "Replicates",
labels = c(
expression(paste('20% ', 'O'[2], ' rep1')),
expression(paste('20% ', 'O'[2], ' rep2')),
expression(paste('5% ', 'O'[2], ' rep1')),
"nCT day 5",
"nCT day 10",
"nTE day 3",
"nTE day 5"
),
values = c(
"20pcO2_r1" = "#0571b0",
"20pcO2_r2" = "#92c5de",
"5pcO2_r1" = "#ca0020",
"5pcO2_r2" = "#f4a582",
"nCT_D5" = "#d133ff",
"nCT_D10" = "#ff33f6",
"nTE_D2" = "#33ffa2",
"nTE_D3" = "#5bff33"
)
) +
scale_fill_manual(
name = "Replicates",
labels = c(
expression(paste('20% ', 'O'[2], ' rep1')),
expression(paste('20% ', 'O'[2], ' rep2')),
expression(paste('5% ', 'O'[2], ' rep1')),
"nCT day 5",
"nCT day 10",
"nTE day 3",
"nTE day 5"
),
values = c(
"20pcO2_r1" = "#0571b0",
"20pcO2_r2" = "#92c5de",
"5pcO2_r1" = "#ca0020",
"5pcO2_r2" = "#f4a582",
"nCT_D5" = "#d133ff",
"nCT_D10" = "#ff33f6",
"nTE_D2" = "#33ffa2",
"nTE_D3" = "#5bff33"
)
) +
scale_linetype_manual(values = "blank")
panel_plot <- plot_grid(A, B, ncol = 2, nrow = 1)
panel_plot
DimPlot(object = bapd8.integrated,
split.by = 'orig.ident',
ncol = 4) +
xlab("UMAP_1") +
ylab("UMAP_2") +
theme_classic() +
theme(legend.position = "none")
A = enhancedDimPlot(
object = bapd8.integrated,
grouping_var = 'ident',
reduction = "umap",
label = FALSE,
pt.size = 1,
alpha = 0.5
) +
xlab("UMAP_1") +
ylab("UMAP_2") +
theme_classic() +
theme(legend.position = "none")
ggplotly(A)
DefaultAssay(bapd8.integrated) <- "RNA"
for (i in 1:num.clusters) {
try({
cluster.markers.all <- FindMarkers(bapd8.integrated, ident.1 = i)
cluster.markers.filtered <-
cluster.markers.all %>%
filter(avg_log2FC >= 0.584962501) %>%
filter(p_val_adj <= 0.05) %>%
arrange(desc(avg_log2FC))
markers.filtered.names <- rownames(cluster.markers.filtered)
assign(paste("cluster.marker.names", i, sep = "."),
markers.filtered.names)
})
}
fullCounts <- tibble(
cluster = bapd8.integrated@meta.data$new_clusters,
cell_type = bapd8.integrated@meta.data$orig.ident
) %>%
dplyr::group_by(cluster, cell_type) %>%
dplyr::count() %>%
dplyr::group_by(cluster) %>%
dplyr::ungroup() %>%
dplyr::mutate(cluster = paste0("Cluster_", cluster))
fullCounts <- fullCounts %>%
group_by(cell_type) %>%
mutate(cell_type_sum = sum(n)) %>%
mutate(percent = (n * 100) / cell_type_sum)
list2env(split(fullCounts, fullCounts$cluster), envir = .GlobalEnv)
mybarplot <- function(pdata, i) {
ggplot(data = pdata,
aes(
x = cell_type,
y = percent,
fill = cell_type,
alpha = 0.5
)) +
geom_bar(stat = "identity") +
theme_classic(base_size = 12) +
theme(legend.position = "none",
axis.text.x = element_text(
angle = 45,
vjust = 1,
hjust = 1
)) +
ggtitle(paste("Cluster", i, "cell composition")) +
ylab("% cells in cluster") +
xlab("") +
scale_colour_manual(
name = "Replicates",
labels = c(
expression(paste('20% ', 'O'[2], ' rep1')),
expression(paste('20% ', 'O'[2], ' rep2')),
expression(paste('5% ', 'O'[2], ' rep1')),
"nCT day 5",
"nCT day 10",
"nTE day 3",
"nTE day 5"
),
values = c(
"20pcO2_r1" = "#DA3C96",
"20pcO2_r2" = "#DA3C96",
"5pcO2_r1" = "#A90065",
"5pcO2_r2" = "#A90065",
"nCT_D5" = "#FFD74D",
"nCT_D10" = "#FFD74D",
"nTE_D2" = "#9BC13C",
"nTE_D3" = "#9BC13C"
)
) +
scale_fill_manual(
name = "Replicates",
labels = c(
expression(paste('20% ', 'O'[2], ' rep1')),
expression(paste('20% ', 'O'[2], ' rep2')),
expression(paste('5% ', 'O'[2], ' rep1')),
"nCT day 5",
"nCT day 10",
"nTE day 3",
"nTE day 5"
),
values = c(
"20pcO2_r1" = "#DA3C96",
"20pcO2_r2" = "#DA3C96",
"5pcO2_r1" = "#A90065",
"5pcO2_r2" = "#A90065",
"nCT_D5" = "#FFD74D",
"nCT_D10" = "#FFD74D",
"nTE_D2" = "#9BC13C",
"nTE_D3" = "#9BC13C"
)
) +
scale_linetype_manual(values = "blank")
}
ggplotColours <- function(n = 6, h = c(0, 360) + 15) {
if ((diff(h) %% 360) < 1)
h[2] <- h[2] - 360 / n
hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)
}
color_list <- ggplotColours(n = 13)
grouped_violinPlots <-
function(markersfile,
clusternumber,
seuratobject = bapd8.integrated) {
dittoPlotVarsAcrossGroups(
seuratobject,
markersfile,
group.by = "new_clusters",
main = paste("Cluster ", clusternumber, " markers expression"),
xlab = "",
ylab = "Mean z-score expression",
x.labels = c(
"Cluster 1",
"Cluster 2",
"Cluster 3",
"Cluster 4",
"Cluster 5",
"Cluster 6",
"Cluster 7",
"Cluster 8",
"Cluster 9",
"Cluster 10",
"Cluster 11",
"Cluster 12",
"Cluster 13"
),
vlnplot.lineweight = 0.5,
legend.show = FALSE,
jitter.size = 0.5,
color.panel = color_list
)
}
save.image("snRNAseq.Rdata")
ensembl = useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(ensembl) %>%
filter(str_detect(description, "Human"))
ensembl = useDataset("hsapiens_gene_ensembl", mart = ensembl)
listFilters(ensembl) %>%
filter(str_detect(name, "ensembl"))
filterType <- "ensembl_gene_id_version"
cts <- as.matrix(read.csv('assets/counts-subset-v5.txt', sep = "\t", row.names = "gene.ids"))
filterValues <- rownames(cts)
listAttributes(ensembl) %>%
head(20)
attributeNames <- c('ensembl_gene_id_version',
'ensembl_gene_id',
'external_gene_name')
annot <- getBM(
attributes = attributeNames,
filters = filterType,
values = filterValues,
mart = ensembl
)
isDup <- duplicated(annot$ensembl_gene_id)
dup <- annot$ensembl_gene_id[isDup]
annot <- annot[!annot$ensembl_gene_id %in% dup, ] #this object will be saved and used later
symbols.to.ensembl <- function(genesymbols) {
newlist <- paste0(deparse(substitute(genesymbols)), ".ensids")
temp <- annot[annot$external_gene_name %in% genesymbols,]
temp <- temp[c(2,3)]
assign(newlist, temp, envir = .GlobalEnv)
}
symbols.to.ensembl(cluster.marker.names.1)
symbols.to.ensembl(cluster.marker.names.2)
symbols.to.ensembl(cluster.marker.names.3)
symbols.to.ensembl(cluster.marker.names.4)
symbols.to.ensembl(cluster.marker.names.5)
symbols.to.ensembl(cluster.marker.names.6)
symbols.to.ensembl(cluster.marker.names.7)
symbols.to.ensembl(cluster.marker.names.8)
symbols.to.ensembl(cluster.marker.names.9)
symbols.to.ensembl(cluster.marker.names.10)
symbols.to.ensembl(cluster.marker.names.11)
symbols.to.ensembl(cluster.marker.names.12)
symbols.to.ensembl(cluster.marker.names.13)
cluster.marker.names.1
library(ggtree)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install("Biostrings")
library(cli)
install.packages("cli")
install.packages("yaml")
devtools::install_github("dynverse/dyno")
dynwrap::test_singularity_installation(detailed = TRUE)
dynwrap::test_docker_installation(detailed = TRUE)
install.packages("airqualityES")
library(airqualityES)
df <- airquality[complete.cases(airquality),]
filter_at(df, vars(Ozone, Solar.R, Wind, Temp), ~. > quantile(., probs = 0.75))
library(tidyverse)
df <- airquality[complete.cases(airquality),]
df
filter_at(df, vars(Ozone, Solar.R, Wind, Temp), ~. > quantile(., probs = 0.75))
setwd("C:/Users/arun/OneDrive - Iowa State University/OrganizedDocuments/github/mouse.trophoblast.smallRNAseq/target_genes")
setwd("/work/LAS/geetu-lab/arnstrm/mouse.trophoblast.smallRNAseq/target_genes")
source(  "../assets/theme_clean.R")
library(TissueEnrich)
library(tidyverse)
files <-
list.files(path = '.', pattern = ".*\\_targetGenes.csv$")
lst <-
setNames(lapply(files, read.csv),
tools::file_path_sans_ext(basename(files)))
gene.lsts <- lapply(lst, '[[', 1)
inputGenes = gene.lsts$DE_up_diff_targetGenes
inputTissue = "E14.5-Brain"
GeneNames = FALSE
gs <-
GeneSet(geneIds = inputGenes,
organism = "Mus Musculus",
geneIdType = SymbolIdentifier())
output <- teEnrichment(inputGenes = gs, rnaSeqDataset = 3)
en.output <-
setNames(data.frame(assay(output[[1]]),
row.names = rowData(output[[1]])[, 1]),
colData(output[[1]])[, 1])
en.output$Tissue <- rownames(en.output)
seExp <- output[[2]][[inputTissue]]
seExp
exp <-
setNames(data.frame(assay(seExp), row.names = rowData(seExp)[, 1]), colData(seExp)[, 1])
exp
head(exp)
library(pheatmap)
pheatmap(exp)
g <- pheatmap(
exp,
color = heat_colors,
show_rownames = T,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 10
)
library(RColorBrewer)
heat_colors <- brewer.pal(9, "YlOrRd")
g <- pheatmap(
exp,
color = heat_colors,
show_rownames = T,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 10
)
g <- pheatmap(
exp,
color = heat_colors,
main = "Top 30 variable small RNA genes",
cluster_rows = F,
cluster_cols  = T,
show_rownames = T,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 10
)
g <- pheatmap(
exp,
color = heat_colors,
main = "Title",
cluster_rows = F,
cluster_cols  = T,
show_rownames = T,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 10
)
g <- pheatmap(
exp,
color = heat_colors,
main = "Title",
cluster_rows = F,
cluster_cols  = T,
show_rownames = T,
border_color = NA,
fontsize = 8,
scale = "row",
fontsize_row = 10
)
g <- pheatmap(
exp,
color = heat_colors,
main = "Title",
cluster_rows = F,
cluster_cols  = T,
show_rownames = T,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 8
)
head(exp)
exp$Gene <- row.names(exp)
head(exp)
exp <-
exp %>% gather(key = "Tissue", value = "expression", 1:(ncol(exp) - 1))
exp
?pheatmap
exp <-
setNames(data.frame(assay(seExp), row.names = rowData(seExp)[, 1]), colData(seExp)[, 1])
g <- pheatmap(
exp,
color = heat_colors,
main = "Title",
cluster_rows = F,
cluster_cols  = T,
show_rownames = F,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 8
)
g <- pheatmap(
exp,
color = heat_colors,
main = "Title",
cluster_rows = F,
cluster_cols  = T,
show_rownames = FALSE,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 8
)
g <- pheatmap(
exp,
color = heat_colors,
main = "Title",
cluster_rows = F,
cluster_cols  = T,
show_rownames = TRUE,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 8
)
g <- pheatmap(
exp,
color = heat_colors,
main = "Title",
cluster_rows = F,
cluster_cols  = T,
show_rownames = GeneNames,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 8
)
g <- pheatmap(
exp,
color = heat_colors,
main = "Title",
cluster_rows = F,
cluster_cols  = T,
show_rownames = GeneNames,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 8
)
g
